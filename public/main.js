// Generated by CoffeeScript 1.6.3
(function() {
  window.cc = function() {
    var arg, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      arg = arguments[_i];
      _results.push(console.log(arg));
    }
    return _results;
  };

  $(function() {
    var Post, PostList, PostListItem, Posts, WordCloud, list;
    window.wordcloud = {};
    window.totalcount = 0;
    WordCloud = Backbone.View.extend({
      el: '.word-cloud',
      initialize: function() {
        return this.render();
      },
      render: function() {
        var self;
        self = this;
        _.each(this.model, function(count, word) {
          var ems, li;
          ems = (count / totalcount) * 300;
          if (ems > 5) {
            ems = 5;
          }
          li = $("<li />").text(word).css({
            "font-size": ems + "em"
          });
          return self.$el.append(li);
        });
        return this;
      }
    });
    Post = Backbone.Model.extend({
      parse: function(model) {
        model.start_date = new Date(model.start_date);
        model.end_date = new Date(model.end_date);
        model.description = $(JSON.parse(model.description).text_out).text().toLowerCase();
        _.each(model.description.split(" "), function(word) {
          if (wordcloud.hasOwnProperty(word)) {
            wordcloud[word]++;
          } else {
            wordcloud[word] = 1;
          }
          return totalcount++;
        });
        return model;
      }
    });
    Posts = Backbone.Collection.extend({
      start: 0,
      url: function() {
        return '/recommendations/' + this.start;
      },
      model: Post
    });
    PostListItem = Backbone.View.extend({
      template: $("#post-item").html(),
      tagName: 'li',
      initialize: function() {
        return this.listenTo(this.model, {
          hide: function() {
            return this.$el.hide();
          },
          show: function() {
            return this.$el.show();
          }
        });
      },
      render: function() {
        this.$el.html(_.template(this.template, this.model.toJSON()));
        return this;
      },
      ratePost: function(like) {
        var a1, a2, attrs, loc;
        attrs = this.model.toJSON();
        a1 = attrs.activity1;
        a2 = attrs.activity2;
        loc = attrs.location;
        cc(this.model.toJSON());
        return $.ajax({
          url: '/users/' + window.userid + "/" + like,
          data: {
            activities: [a1, a2],
            locations: [loc]
          },
          type: 'PUT',
          success: function(result) {
            return cc(result);
          }
        });
      },
      events: {
        "click .js-like-post": function(e) {
          this.ratePost(true);
          return $(e.currentTarget).addClass("js-unlike-post").removeClass("js-like-post").text("Unlike");
        },
        "click .js-unlike-post": function(e) {
          this.ratePost(false);
          return $(e.currentTarget).addClass("js-like-post").removeClass("js-unlike-post").text("Like");
        }
      }
    });
    PostList = Backbone.View.extend({
      el: 'ul.post-list',
      initialize: function() {
        _.bindAll(this, "addPost", "render");
        this.listenTo(this.collection, "add", this.addPost);
        return this.render();
      },
      addPost: function(post) {
        this.$el.append((new PostListItem({
          model: post
        })).render().el);
        return this;
      },
      render: function() {
        _.each(this.collection.models, this.addPost);
        return this;
      }
    });
    window.allposts = new Posts;
    list = null;
    allposts.fetch({
      success: function(response) {
        var WordCloudView;
        list = new PostList({
          collection: response
        });
        return WordCloudView = new WordCloud({
          model: wordcloud,
          count: totalcount
        });
      },
      parse: true
    });
    $(".show-word-cloud").on("click", function() {
      return $(".word-cloud").toggle("fast");
    });
    return $(".js-filter-results").on("keyup", function(e) {
      var filter, key, val;
      key = e.keyCode || e.which;
      if (key === 13) {
        val = $(this).val();
        return filter = _.each(allposts.models, function(post) {
          var text;
          text = post.toJSON();
          text = (text.description + text.location + text.activity1 + text.activity2).toLowerCase();
          if (text.indexOf(val) === -1) {
            return post.trigger("hide");
          } else {
            return post.trigger("show");
          }
        });
      }
    });
  });

  $(window).scroll(function() {
    if ($(window).scrollTop() + $(window).height() === $(document).height()) {
      allposts.start += 20;
      return allposts.fetch({
        remove: false
      });
    }
  });

}).call(this);
