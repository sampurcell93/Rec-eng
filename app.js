// Generated by CoffeeScript 1.6.3
(function() {
  var Facebook, app, cc, current_user, db, express, mongo, parser, port, _;

  express = require("express");

  _ = require("underscore");

  app = express();

  mongo = "receng-sample";

  Facebook = require("facebook-node-sdk");

  db = require("mongojs").connect(mongo, ["users", "posts"]);

  port = void 0;

  current_user = 0;

  app.configure(function() {
    app.use(express.logger("dev"));
    app.set("views", __dirname + "/views");
    app.set("view engine", "jade");
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(express["static"](__dirname + "/public"));
    app.use(express.session({
      secret: "foo bar"
    }));
    return app.use(Facebook.middleware({
      appId: "474944245955765",
      secret: "7b41fc65ccfea7b128dd0bc1fca2c8cc"
    }));
  });

  cc = function() {
    var arg, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      arg = arguments[_i];
      _results.push(console.log(arg));
    }
    return _results;
  };

  app.listen((port = process.env.PORT || 5050), function() {
    return console.log("Listening on " + port);
  });

  parser = new (function() {
    return {
      getUserData: function(req, res, next) {
        return db.users.find({
          user_id: 28
        }, function(err, result) {
          if (!err) {
            req.user = result[0];
            return next();
          } else {
            return cc("FUCKING FUCK THIS PROJECT");
          }
        });
      },
      getPostData: function(req, res, next) {
        return db.posts.find({}, function(err, results) {
          req.posts = results;
          return next();
        }).sort({
          start_date: -1
        });
      },
      matchKeywords: function(user, posts, callback) {
        var weights, _rankPosts;
        weights = user;
        _rankPosts = function(post) {
          var a1, a2, w1, w2;
          post.score = 0;
          a1 = post.activity1.toLowerCase();
          a2 = post.activity2.toLowerCase();
          w1 = weights[a1];
          w2 = weights[a2];
          return post.score += w1 + w2;
        };
        _.each(posts, _rankPosts);
        posts.sort(callback || (function(a, b) {
          return b.score - a.score;
        }));
        return posts;
      }
    };
  });

  app.get("/recommendations", parser.getUserData, parser.getPostData, function(req, res) {
    var sorted, start, user;
    user = req.user;
    start = parseInt(req.query.start) || (start = 0);
    sorted = parser.matchKeywords(user, req.posts);
    return res.json(sorted.slice(start, start + 20));
  });

  app.get("/", function(req, res) {
    return res.render("createuser", {
      user: {
        activities: ["swimming", "biking"]
      }
    });
  });

  app.post("/users", function(req, res) {
    cc(req.body);
    return res.redirect("/");
  });

  app.get("/users/:name", function(req, res) {
    return db.users.find({
      name: req.params.name
    }, function(err, results) {
      return res.json(results);
    });
  });

  app.get("/users", function(req, res) {
    return db.users.find({}, function(err, results) {
      return res.json(results);
    });
  });

  app.get("/posts", parser.getPostData, function(req, res) {
    return res.json(req.posts);
  });

  app.get("/dev", function(req, res) {});

}).call(this);
