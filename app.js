// Generated by CoffeeScript 1.6.3
(function() {
  var Facebook, app, cc, current_user, db, express, http, mongo, objid, parser, pop, port, _;

  express = require("express");

  _ = require("underscore");

  app = express();

  mongo = "receng-sample";

  http = require('http');

  objid = require("ObjectId");

  Facebook = require("facebook-node-sdk");

  db = require("mongojs").connect(mongo, ["users", "posts"]);

  port = void 0;

  current_user = 0;

  app.configure(function() {
    app.use(express.logger("dev"));
    app.set("views", __dirname + "/views");
    app.set("view engine", "jade");
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(express["static"](__dirname + "/public"));
    app.use(express.session({
      secret: "foo bar"
    }));
    return app.use(Facebook.middleware({
      appId: "474944245955765",
      secret: "7b41fc65ccfea7b128dd0bc1fca2c8cc"
    }));
  });

  cc = function() {
    var arg, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      arg = arguments[_i];
      _results.push(console.log(arg));
    }
    return _results;
  };

  app.listen((port = process.env.PORT || 5050), function() {
    return console.log("Listening on " + port);
  });

  parser = new (function() {
    return {
      getUserData: function(req, res, next) {
        return db.users.find({
          user_id: 29
        }, function(err, result) {
          if (!err) {
            req.user = result[0];
            return next();
          } else {
            return cc("FUCKING FUCK THIS PROJECT");
          }
        });
      },
      getPostData: function(req, res, next) {
        return db.posts.find({}).sort({
          start_date: 1
        }, function(err, results) {
          req.posts = results;
          return next();
        });
      },
      matchKeywords: function(user, posts, callback) {
        var activities, locations, _rankPosts;
        activities = user.activities;
        locations = user.locations;
        _rankPosts = function(post, iterator) {
          var a1, a2, w1, w2;
          post.score = 0;
          a1 = post.activity1.toLowerCase();
          a2 = post.activity2.toLowerCase();
          w1 = activities[a1] || parseInt("0");
          w2 = activities[a2] || parseInt("0");
          post.score += w1 + w2;
          if (user.locations.hasOwnProperty(post.location)) {
            post.score += user.locations[post.location];
          }
          post.score -= parseInt(iterator / 30);
          return true;
        };
        _.each(posts, _rankPosts);
        posts.sort(callback || (function(a, b) {
          return b.score - a.score;
        }));
        return posts;
      }
    };
  });

  app.get("/recommendations/:start", parser.getUserData, parser.getPostData, function(req, res) {
    var sorted, start, user;
    user = req.user;
    start = parseInt(req.params.start) || (start = 0);
    sorted = parser.matchKeywords(user, req.posts);
    return res.json(sorted.slice(start, start + 20));
  });

  app.get("/news", parser.getUserData, function(req, res) {
    return res.render("newsfeed", {
      userid: req.query.id,
      user: JSON.stringify(req.user)
    });
  });

  app.get("/", function(req, res) {
    return res.render("createuser", {
      user: {
        activities: ["swimming", "biking"]
      }
    });
  });

  app.post("/users", function(req, res) {
    cc(req.body);
    return res.redirect("/");
  });

  app.get("/users/:name", function(req, res) {
    return db.users.find({
      name: req.params.name
    }, function(err, results) {
      return res.json(results);
    });
  });

  app.get("/users", function(req, res) {
    return db.users.find({}, function(err, results) {
      return res.json(results);
    });
  });

  app.put("/users/:id/:inc", function(req, res) {
    var a1, a2, id, inc, loc;
    a1 = req.body.activities[0].toLowerCase();
    a2 = req.body.activities[1].toLowerCase();
    loc = req.body.location;
    id = parseInt(req.params.id);
    inc = req.params.inc === "true" ? 1 : -1;
    db.users.findOne({
      user_id: id
    }, function(err, res) {
      var activities;
      activities = res.activities;
      if (activities[a1]) {
        activities[a1] += inc;
      } else {
        activities[a1] = inc;
      }
      if (activities[a2]) {
        activities[a2] += inc;
      } else {
        activities[a2] = inc;
      }
      if (res.locations[loc]) {
        res.locations[loc] += inc;
      } else {
        res.locations[loc] = inc;
      }
      return db.users.update({
        user_id: id
      }, {
        $set: {
          activities: activities,
          locations: res.locations
        }
      }, function(err, updated) {
        return console.log(updated);
      });
    });
    return res.json({
      success: true
    });
  });

  app.get("/posts", parser.getPostData, function(req, res) {
    return res.json(req.posts);
  });

  pop = function(id) {
    var options;
    options = {
      host: 'www.randomtext.me',
      port: 80,
      path: '/api/gibberish/p-1/60-100'
    };
    return http.get(options, function(res) {
      return res.on('data', function(chunk) {
        chunk = chunk.toString();
        return db.posts.update({
          _id: objid(id)
        }, {
          $set: {
            description: chunk
          }
        }, {
          upsert: true
        });
      });
    }).on('error', function(e) {
      return console.log("Got error: " + e.message);
    });
  };

  app.get("/dev", function(req, res) {
    return db.posts.find().forEach(function(err, obj) {
      if (obj != null) {
        return pop(obj._id);
      }
    });
  });

}).call(this);
